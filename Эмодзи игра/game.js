// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const game = document.getElementById('game');
const player = document.getElementById('player');
const scoreElement = document.getElementById('score');
const highscoreElement = document.getElementById('highscore');
const gameOverElement = document.getElementById('game-over');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let isJumping = false;
let gameActive = true;
let score = 0;
let highscore = localStorage.getItem('highscore') || 0;
let obstacleTimeout = null;
let coinTimeout = null;
let giftCounter = 0;
highscoreElement.textContent = highscore;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const JUMP_HEIGHT = 20;
const OBSTACLE_SPEED = 7;
const GIFT_FREQUENCY = 2;
const BACKGROUND_EMOJI = ['üåü', '‚ú®', 'üí´', '‚≠ê'];

// –ó–≤—É–∫–∏
const jumpSound = new Audio('sounds/jump1.mp3');
const collisionSound = new Audio('sounds/collision.mp3');
const giftSound = new Audio('sounds/gift.mp3');
giftSound.volume = 0.3;
const coinSound = new Audio('sounds/many.mp3');
coinSound.volume = 0.7;
const gameOverSound = new Audio('sounds/gameover.mp3');
gameOverSound.volume = 0.4;

// –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
jumpSound.volume = 0.3; // –æ—Ç 0 –¥–æ 1
collisionSound.volume = 1; // –æ—Ç 0 –¥–æ 1

function jump() {
    if (!isJumping && gameActive) {
        isJumping = true;
        jumpSound.currentTime = 0;
        jumpSound.play().catch(e => console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
        player.style.transform = `translateY(-${JUMP_HEIGHT}vh)`;
        
        setTimeout(() => {
            player.style.transform = 'translateY(0)';
            setTimeout(() => {
                isJumping = false;
            }, 300);
        }, 300);
    }
}

function createGift() {
    if (!gameActive) return;
    
    const gift = document.createElement('div');
    gift.className = 'gift';
    gift.textContent = 'üéÅ';
    gift.style.left = '100%';
    game.appendChild(gift);

    let position = 100;
    
    const moveGift = () => {
        if (position <= -10) {
            gift.remove();
            return;
        }

        position -= OBSTACLE_SPEED * 0.1;
        gift.style.left = position + '%';

        const playerRect = player.getBoundingClientRect();
        const giftRect = gift.getBoundingClientRect();

        if (
            playerRect.right > giftRect.left &&
            playerRect.left < giftRect.right &&
            playerRect.bottom > giftRect.top &&
            playerRect.top < giftRect.bottom
        ) {
            gift.remove();
            giftSound.currentTime = 0;  
            giftSound.play();
            score += 5;
            scoreElement.textContent = score;
            if (score > highscore) {
                highscore = score;
                highscoreElement.textContent = highscore;
                localStorage.setItem('highscore', highscore);
            }
        }

        if (gameActive) {
            requestAnimationFrame(moveGift);
        }
    };

    requestAnimationFrame(moveGift);
}

function createCoin() {
    if (!gameActive) return;
    
    const coin = document.createElement('div');
    coin.className = 'coin';
    coin.textContent = 'üç™';
    coin.style.left = '100%';
    game.appendChild(coin);

    let position = 100;
    
    const moveCoin = () => {
        if (position <= -10) {
            coin.remove();
            return;
        }

        position -= OBSTACLE_SPEED * 0.1;
        coin.style.left = position + '%';

        const playerRect = player.getBoundingClientRect();
        const coinRect = coin.getBoundingClientRect();

        if (
            playerRect.right > coinRect.left &&
            playerRect.left < coinRect.right &&
            playerRect.bottom > coinRect.top &&
            playerRect.top < coinRect.bottom
        ) {
            coin.remove();
            coinSound.currentTime = 0;
            coinSound.play(); 
            score += 2;
            giftCounter++;
            
            if (giftCounter >= GIFT_FREQUENCY) {
                giftCounter = 0;
                createGift();
            }
            
            scoreElement.textContent = score;
            if (score > highscore) {
                highscore = score;
                highscoreElement.textContent = highscore;
                localStorage.setItem('highscore', highscore);
            }
        }

        if (gameActive) {
            requestAnimationFrame(moveCoin);
        }
    };

    requestAnimationFrame(moveCoin);
}

function createObstacle() {
    if (!gameActive) return;

    const obstacle = document.createElement('div');
    obstacle.className = 'obstacle';
    obstacle.textContent = 'üéÑ';
    obstacle.style.left = '100%';
    game.appendChild(obstacle);

    let position = 100;
    
    const moveObstacle = () => {
        if (position <= -10) {
            obstacle.remove();
            score++;
            scoreElement.textContent = score;
            if (score > highscore) {
                highscore = score;
                highscoreElement.textContent = highscore;
                localStorage.setItem('highscore', highscore);
            }
            return;
        }

        position -= OBSTACLE_SPEED * 0.1;
        obstacle.style.left = position + '%';

        const playerRect = player.getBoundingClientRect();
        const obstacleRect = obstacle.getBoundingClientRect();

        if (
            playerRect.right - 20 > obstacleRect.left &&
            playerRect.left + 20 < obstacleRect.right &&
            playerRect.bottom - 10 > obstacleRect.top &&
            playerRect.top + 10 < obstacleRect.bottom
        ) {
            gameOver();
        }

        if (gameActive) {
            requestAnimationFrame(moveObstacle);
        }
    };

    requestAnimationFrame(moveObstacle);
}

function gameOver() {
    gameActive = false;
    collisionSound.currentTime = 0;
    collisionSound.play().catch(e => console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
    gameOverSound.currentTime = 0;
    gameOverSound.play();
    gameOverElement.style.display = 'block';
    
   
}

function resetGame() {
    gameActive = true;
    score = 0;
    giftCounter = 0;
    scoreElement.textContent = score;
    
    document.querySelectorAll('.obstacle').forEach(obstacle => obstacle.remove());
    document.querySelectorAll('.coin').forEach(coin => coin.remove());
    document.querySelectorAll('.gift').forEach(gift => gift.remove());
    document.querySelectorAll('.background-emoji').forEach(emoji => emoji.remove());
    
    if (obstacleTimeout) {
        clearTimeout(obstacleTimeout);
    }
    if (coinTimeout) {
        clearTimeout(coinTimeout);
    }
    
    startGame();
}

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–¥–∏–Ω –ª–µ—Ç—è—â–∏–π —ç–º–æ–¥–∑–∏ –Ω–∞ —Ñ–æ–Ω–µ
function createBackgroundEffect() {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const emoji = document.createElement('div');
    // –î–∞—ë–º –µ–º—É –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π
    emoji.className = 'background-emoji';
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ BACKGROUND_EMOJI
    emoji.textContent = BACKGROUND_EMOJI[Math.floor(Math.random() * BACKGROUND_EMOJI.length)];
    // –ó–∞–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç 10px –¥–æ 30px
    emoji.style.fontSize = Math.random() * 40 + 10 + 'px';
    // –ó–∞–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã—Å–æ—Ç—É
    emoji.style.top = Math.random() * 70 + 'vh';
    // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–ø—Ä–∞–≤–∞
    emoji.style.left = '100%';
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∏–≥—Ä—É
    game.appendChild(emoji);

    // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
    let position = 100;
    // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
    const speed = Math.random() * 1 + 0.5;

    // –§—É–Ω–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    const moveEmoji = () => {
        // –ï—Å–ª–∏ –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞ - —É–¥–∞–ª—è–µ–º
        if (position < -10) {
            emoji.remove();
            return;
        }

        // –î–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ
        position -= speed;
        emoji.style.left = position + '%';

        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if (gameActive) {
            requestAnimationFrame(moveEmoji);
        }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    requestAnimationFrame(moveEmoji);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ø–∞–º—è—Ç—å
    setTimeout(() => emoji.remove(), 15000);
}
function startGame() {
    function generateObstacle() {
        if (gameActive) {
            createObstacle();
            obstacleTimeout = setTimeout(generateObstacle, Math.random() * 2000 + 3000);
        }
    }
    
    function generateCoin() {
        if (gameActive) {
            createCoin();
            coinTimeout = setTimeout(generateCoin, Math.random() * 3000 + 2000);
        }
    }

    generateObstacle();
    generateCoin();
    setInterval(() => {
        if (gameActive) {
            createBackgroundEffect();
        }
    }, 2000);
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
document.addEventListener('click', function initSounds() {
    jumpSound.play().catch(() => {}).then(() => jumpSound.pause());
    collisionSound.play().catch(() => {}).then(() => collisionSound.pause());
    document.removeEventListener('click', initSounds);
}, { once: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('keydown', (e) => {
    if (e.code === 'Space') {
        e.preventDefault();
        if (!gameActive) {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            gameOverElement.style.display = 'none';
            resetGame();
        } else {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä—ã–≥–∞–µ–º
            jump();
        }
    }
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
startGame();